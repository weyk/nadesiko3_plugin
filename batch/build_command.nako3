＃command.json をビルドする
母艦パス取得してパス抽出して基本パスに代入。
プラグイン名＝空。
表題＝空。
P={}
関数定義とは変数
関数説明とは変数
助詞定義JSONとは変数
ヨミガナとは変数

プラグイン一覧は[
    'plugin_weykthree.js',
    'plugin_weykturtle3d.js'
 ]

プラグインマッピングは{
    'plugin_weykthree' : 'PluginWeykThree',
    'plugin_weykturtle3d' : 'PluginWeykTurtle3D'
 }

プラグイン一覧を反復
　　パスは「{基本パス}/src/{それ}」
　　パスをプラグイン要約作成
ここまで
PをJSONエンコード整形して表示。
PをJSONエンコードしてJに代入。
「{基本パス}/release/weykplugin.json」にJを保存。

●プラグイン要約作成(Fを)
　　Ｆからファイル名抽出して「.js」を空に置換してプラグイン名に代入。
　　プラグインロード名はプラグインマッピング[プラグイン名]
　　プラグイン名は「{プラグイン名}({プラグインロード名})」
　　P[プラグイン名]={}
    Ｆを開く
    改行で区切る
    ここから反復
        毎行処理。
    ここまで
ここまで。

●定数定義処理(抽出文字列で)
　　定数定義＝トリム(抽出文字列[0])
　　抽出文字列[1]をトリム。
　　「const」を「定数」に置換
　　「var」を「変数」に置換して、Fタイプに代入。
　　定数値＝トリム（抽出文字列[2]）
　　ヨミガナ＝トリム（抽出文字列[3]）
　　もし、ヨミガナが空ならば
　　　　ヨミガナ＝定数定義。
　　ここまで。
　　定数値の「"」を空に置換して説明に代入。
　　V=[Fタイプ,定数定義,"",定数値,ヨミガナ]
　　P[プラグイン名][表題]にVを配列追加。
ここまで。

●毎行処理（Sを)
　　S = トリム(S)
　　# 見出し語？
　　Ｓを『/^\/\/ @(.+)/』で正規表現マッチ
　　もし、そうならば
　　　　それの「^\/\/\s*@」を「」に正規表現置換して表題に代入
　　　　P[プラグイン名][表題] = []
　　　　戻る
　　ここまで。

    ＃定数でヨミガナ付き
    Ｓを『/'(.+?)'.+(const|var).+value:\s*(.+)\}.+?\/\/\s?@?(.*)/』で正規表現マッチ
    もし、そうならば
        抽出文字列で定数定義処理。戻る。
    ここまで。
    # 定数ヨミガナ抜け＞エラー
    Ｓを『/"(.+?)".+(const|var).+value:\s*(.+)\}/』で正規表現マッチ
    もし、そうならば
        定数定義＝抽出文字列[0]
        「--- ERROR --- 『｛定数定義｝』でヨミガナがありません。」と表示
        終わる。
    ここまで。

    # 関数定義？
    Ｓを『/'(.+?)'\s*:\s*\{\s*\/\/\s*@\s*(.+)$/』で正規表現マッチ
    もし、そうならば
        助詞定義JSON=[]
        ヨミガナ＝「」
        関数定義＝トリム(抽出文字列[0])
        関数説明＝トリム(抽出文字列[1])
        関数説明で「// @」が何文字目
        もし、それ＞０ならば
        　　関数説明を「// @」で区切って、Aに代入。
        　　関数説明＝トリム(A[0])
        　　ヨミガナ＝トリム(A[1])
        　　もし、ヨミガナが空ならば、ヨミガナ＝関数定義。
        ここまで
        もし、ヨミガナが空ならば
        　　「--- ERROR ---『{関数定義}』でヨミガナがありません」と表示。
        　　終わる。
        ここまで。
        戻る。
    ここまで

    もし、関数定義≠空ならば
        Ｓを『/type\s*\:\s*'func'/』で正規表現マッチ
        もし、そうならば
        　　戻る
        ここまで。
        Ｓを『/josi\s*\:\s*(.+),$/』で正規表現マッチ
        もし、そうならば
            それ＝抽出文字列[0]
            トリム。
            「'」を「"」に置換。
            JSONデコード。
            助詞定義JSONに代入。
            戻る。
        ここまで
        Sを『/^fn\s*\:\s*function\s*\((.*?)\)/』で正規表現マッチ。
        もし、そうならば
            助詞定義＝「」
            それ＝抽出文字列[0]
            「/\,\s*sys/」を「」に正規表現置換してトリム。
            引数一覧=[]
            「,」で区切る
            反復
                大文字変換してトリムして、引数名に代入。
                引数一覧に引数名を配列追加。
            ここまで
            AA=[]
            Iを0から9まで繰り返す
                SS=「」
                NOを0から9まで繰り返す
                    もし、NO>=配列要素数(引数一覧)ならば、続ける。
                    もし、NO>=配列要素数(助詞定義JSON)ならば、続ける。
                    もし、I>=配列要素数(助詞定義JSON[NO])ならば、続ける。
                    ARG＝引数一覧[NO]
                    JOSI＝助詞定義JSON[NO][I]
                    SS = SS & ARG & JOSI
                ここまで;
                もし、SS≠空ならば、AAにSSを配列追加。
            ここまで
            AAを「/」で配列結合して、助詞定義に代入。

　　　　　　タイプ＝「関数」
　　　　　　名前＝トリム(関数定義)
　　　　　　引数＝トリム(助詞定義)
　　　　　　説明＝トリム(関数説明)
　　　　　　ヨミ＝LEFT(トリム(ヨミガナ),1)
　　　　　　V=[タイプ,名前,引数,説明,ヨミ]
　　　　　　P[プラグイン名][表題]にVを配列追加。
　　　　　　関数定義＝「」
　　　　ここまで。
　　ここまで
　　関数定義＝「」
　　定数定義＝「」
ここまで。
